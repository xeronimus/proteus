{
    "id": "git",
    "title": "Fast Version Control",
    "chapters": [
        {
            "cheats": [
                {
                    "description": "Clone an existing repository",
                    "command": "git clone ssh://user@domain.com/repo.git"
                },
                {
                    "description": "Create a new local repository",
                    "command": "git init"
                }
            ],
            "title": "create"
        },
        {
            "cheats": [
                {
                    "description": "Changed files in your working directory",
                    "command": "git status"
                },
                {
                    "description": "Changes to tracked files",
                    "command": "git diff"
                },
                {
                    "description": "Add all current changes to the next commit",
                    "command": "git add ."
                },
                {
                    "description": "Add some changes in <file> to the next commit",
                    "command": "git add -p <file>"
                },
                {
                    "description": "Commit all local changes in tracked files",
                    "command": "git commit -a"
                },
                {
                    "description": "Commit previously staged changes",
                    "command": "git commit"
                },
                {
                    "description": "Change the last commit",
                    "comment": "Don't amend published commits!",
                    "command": "git commit --amend"
                }
            ],
            "title": "local changes"
        },
        {
            "cheats": [
                {
                    "description": "Show all commits, starting with newest",
                    "command": "git log"
                },
                {
                    "description": "Show changes over time for a specific file",
                    "command": "git log -p <file>"
                },
                {
                    "description": "Who changed what and when in <file>",
                    "command": "git blame <file>"
                }
            ],
            "title": "Commit history"
        },
        {
            "cheats": [
                {
                    "description": "List all existing branches",
                    "command": "git branch"
                },
                {
                    "description": "Switch HEAD branch",
                    "command": "git checkout <branch>"
                },
                {
                    "description": "Create a new branch based on your current HEAD",
                    "command": "git branch <new-branch>"
                },
                {
                    "description": "Create a new tracking branch based on a remote branch",
                    "command": "git checkout --track <remote/branch>"
                },
                {
                    "description": "Delete a local branch",
                    "command": "git branch -d <branch>"
                },
                {
                    "description": "Mark the current commit with a tag",
                    "command": "git tag <tag-name>"
                }
            ],
            "title": "branches and tags"
        },
        {
            "cheats": [
                {
                    "description": "List all currently configured remotes",
                    "command": "git remote -v"
                },
                {
                    "description": "Show information about a remote",
                    "command": "git remote show <remote>"
                },
                {
                    "description": "Add new remote repository, named <remote>",
                    "command": "git remote add <remote> <url>"
                },
                {
                    "description": "Download all changes from <remote>, but don‘t integrate into HEAD",
                    "command": "git fetch <remote>"
                },
                {
                    "description": "Download changes and directly merge/ integrate into HEAD",
                    "command": "git pull <remote> <branch>"
                },
                {
                    "description": "Publish local changes on a remote",
                    "command": "git push <remote> <branch>"
                },
                {
                    "description": "Delete a branch on the remote",
                    "command": "git branch -dr <remote/branch>"
                },
                {
                    "description": "Publish your tag s",
                    "command": "git push --tags"
                }
            ],
            "title": "update and publish"
        },
        {
            "cheats": [
                {
                    "description": "Merge <branch> into your current HEAD",
                    "command": "git merge <branch>"
                },
                {
                    "description": "Rebase your current HEAD onto <branch>",
                    "comment": "Don't rebase published commits!",
                    "command": "git rebase <branch>"
                },
                {
                    "description": "Abort a rebase",
                    "command": "git rebase --abort"
                },
                {
                    "description": "Continue a rebase after resolving conflicts",
                    "command": "git rebase --continue"
                },
                {
                    "description": "Use your configured merge tool to solve conflicts",
                    "command": "git mergetool"
                },
                {
                    "description": "Use your editor to manually solve conflicts and (after resolving) mark file as resolved",
                    "command": "git add <resolved-file>"
                }
            ],
            "title": "merge and rebase"
        },
        {
            "cheats": [
                {
                    "description": "Discard all local changes in your working directory",
                    "command": "git reset --hard HEAD"
                },
                {
                    "description": "Discard local changes in a specific file",
                    "command": "git checkout HEAD <file>"
                },
                {
                    "description": "Revert a commit (by producing a new commit with contrary changes)",
                    "command": "git revert <commit>"
                },
                {
                    "description": "Reset your HEAD pointer to a previous commit …and discard all changes since then",
                    "command": "git reset --hard <commit>"
                },
                {
                    "description": "…and preserve all changes as unstaged changes",
                    "command": "git reset <commit>"
                },
                {
                    "description": "…and preserve uncommitted local changes",
                    "command": "git reset --keep <commit>"
                }
            ],
            "title": "undo"
        }
    ]
}